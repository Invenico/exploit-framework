package dispatcher

import (
	"bytes"
	"fmt"
	"io"
	"os/exec"
	"runtime"
	"strings"

	"github.com/krishpranav/exploit-framework/lib/context"
	"github.com/krishpranav/exploit-framework/lib/util/log"
	"github.com/krishpranav/exploit-framework/lib/util/reflection"
	"github.com/WangYihang/readline"
)

type Dispatcher struct{}

var ReadLineInstance *readline.Instance

func System(command string) (error, string, string) {
	var stdout bytes.Buffer
	var stderr bytes.Buffer
	os := runtime.GOOS
	switch os {
	case "windows":
		cmd := exec.Command("cmd", "/C", command)
		cmd.Stdout = &stdout
		cmd.Stderr = &stderr
		err := cmd.Run()
		return err, stdout.String(), stderr.String()
	case "darwin":
		cmd := exec.Command("/bin/sh", "-c", command)
		cmd.Stdout = &stdout
		cmd.Stderr = &stderr
		err := cmd.Run()
		return err, stdout.String(), stderr.String()
	case "linux":
		cmd := exec.Command("/bin/sh", "-c", command)
		cmd.Stdout = &stdout
		cmd.Stderr = &stderr
		err := cmd.Run()
		return err, stdout.String(), stderr.String()
	default:
		return fmt.Errorf("Unsupported OS type: %s", os), "", ""
	}
}